/*
 * $Id: bibtex6.sablecc,v 1.2 2006/09/11 15:48:43 Moritz.Ringler Exp $
 *
 * Copyright (c) 2004-2005 Oskar Ojala
 * Copyright (c) 2007 Moritz Ringler
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A BibTeX parser
 *
 * @author Oskar Ojala, Moritz Ringler
 */
/*
    Modifications by Moritz Ringler
        * store preamble sections
        * allow string, preamble, entry definitions in arbitrary order
*/

//Package fi.hut.soberit.texlipse.bibparser;
//Package bibtex6;
Package net.sourceforge.texlipse.bibparser;

// ----------------------------------------------------------------------------
Helpers

    unicode_input_character = [0..0xffff];

//    ascii_char = [0..0x7f]; // conflict?

    ht = 0x0009;
    lf = 0x000a;
    ff = 0x000c;
    cr = 0x000d;
    sp = ' ';

    ws = [sp + [[ht + lf] + [ff + cr]]];

    line_terminator = lf | cr | cr lf;
    input_character = unicode_input_character;
    input_character_nb = [unicode_input_character - [cr + lf]];
    input_character_nat = [unicode_input_character - '@'];

    q_str_char = [input_character - '"'] | '\"';
    b_str_char = [input_character - [ws + ['{' + '}']]];


    digit = ['0'..'9'];
    letter = ['a'..'z']|['A'..'Z'];
    punctuation = ':'|'.'|'-'|'+'|'/'|'_'; // maybe add '

// ----------------------------------------------------------------------------
States

normal, inentry, inatentry, assign, bracestring, qstring, remove;

// ----------------------------------------------------------------------------
Tokens

    {inentry, assign, bracestring, remove} whitespace = (sp | ht | ff | line_terminator)+;

    {normal->inentry} estring = '@' ['S'+'s'] ['T'+'t'] ['R'+'r'] ['I'+'i'] ['N'+'n'] ['G'+'g'];

    {normal->remove} scribe_comment = '@' ['C'+'c'] ['O'+'o'] ['M'+'m'] ['M'+'m'] ['E'+'e'] ['N'+'n'] ['T'+'t'];
    {normal->inatentry} preamble = '@' ['P'+'p'] ['R'+'r'] ['E'+'e'] ['A'+'a'] ['M'+'m'] ['B'+'b'] ['L'+'l'] ['E'+'e'];

    {normal->inentry} entry_name = '@' letter+;

    {normal} comment = input_character_nat*;

// @include? not supported in BibTeX 0.99c so not supported here

/*
    {normal} article = ['A'+'a'] ['R'+'r'] ['T'+'t'] ['I'+'i'] ['C'+'c'] ['L'+'l'] ['E'+'e'];
    {normal} book = ['B'+'b'] ['O'+'o'] ['O'+'o'] ['K'+'k'];
    {normal} booklet = ['B'+'b'] ['O'+'o'] ['O'+'o'] ['K'+'k'] ['L'+'l'] ['E'+'e'] ['T'+'t'];
    {normal} conference = ['C'+'c'] ['O'+'o'] ['N'+'n'] ['F'+'f'] ['E'+'e'] ['R'+'r'] ['E'+'e'] ['N'+'n'] ['C'+'c'] ['E'+'e'];
    {normal} inbook = ['I'+'i'] ['N'+'n'] ['B'+'b'] ['O'+'o'] ['O'+'o'] ['K'+'k'];

    {normal} incollection = ['I'+'i'] ['N'+'n'] ['C'+'c'] ['O'+'o'] ['L'+'l'] ['L'+'l'] ['E'+'e'] ['C'+'c'] ['T'+'t'] ['I'+'i'] ['O'+'o'] ['N'+'n'];
    {normal} inproceedings = ['I'+'i'] ['N'+'n'] ['P'+'p'] ['R'+'r'] ['O'+'o'] ['C'+'c'] ['E'+'e'] ['E'+'e'] ['D'+'d'] ['I'+'i'] ['N'+'n'] ['G'+'g'] ['S'+'s'];
    {normal} manual = ['M'+'m'] ['A'+'a'] ['N'+'n'] ['U'+'u'] ['A'+'a'] ['L'+'l'];
    {normal} mastersthesis = ['M'+'m'] ['A'+'a'] ['S'+'s'] ['T'+'t'] ['E'+'e'] ['R'+'r'] ['S'+'s'] ['T'+'t'] ['H'+'h'] ['E'+'e'] ['S'+'s'] ['I'+'i'] ['S'+'s'];
    {normal} misc = ['M'+'m'] ['I'+'i'] ['S'+'s'] ['C'+'c'];
//bonus
    {normal} patent = ['P'+'p'] ['A'+'a'] ['T'+'t'] ['E'+'e'] ['N'+'n'] ['T'+'t'];
    {normal} periodical = ['P'+'p'] ['E'+'e'] ['R'+'r'] ['I'+'i'] ['O'+'o'] ['D'+'d'] ['I'+'i'] ['C'+'c'] ['A'+'a'] ['L'+'l'];

    {normal} phdthesis = ['P'+'p'] ['H'+'h'] ['D'+'d'] ['T'+'t'] ['H'+'h'] ['E'+'e'] ['S'+'s'] ['I'+'i'] ['S'+'s'];
    {normal} proceedings = ['P'+'p'] ['R'+'r'] ['O'+'o'] ['C'+'c'] ['E'+'e'] ['E'+'e'] ['D'+'d'] ['I'+'i'] ['N'+'n'] ['G'+'g'] ['S'+'s'];
    {normal} techreport = ['T'+'t'] ['E'+'e'] ['C'+'c'] ['H'+'h'] ['R'+'r'] ['E'+'e'] ['P'+'p'] ['O'+'o'] ['R'+'r'] ['T'+'t'];
    {normal} unpublished = ['U'+'u'] ['N'+'n'] ['P'+'p'] ['U'+'u'] ['B'+'b'] ['L'+'l'] ['I'+'i'] ['S'+'s'] ['H'+'h'] ['E'+'e'] ['D'+'d'];
*/


    {inentry, inatentry->assign, assign->bracestring, bracestring, remove} l_brace = '{';
    {inentry->normal, assign->normal, bracestring, remove} r_brace = '}';

    {bracestring, remove} b_string = b_str_char+;

    {inentry, inatentry->assign} l_paren = '(';
    {inentry->normal, assign->normal} r_paren = ')';

//    {normal} at = '@';
    {inentry, assign->inentry} comma = ',';
    {inentry->assign} equals = '=';
    {assign} sharp = '#';


    {assign} number = digit+;
    {inentry, assign} identifier = (letter|digit|punctuation)+;


    {assign->qstring, qstring->assign} quotec = '"';
    {qstring} string_literal = q_str_char*;


// ----------------------------------------------------------------------------
Ignored Tokens

// we take care of the preamble and scribe comment in the custom lexer
    whitespace,
    comment;


// ----------------------------------------------------------------------------
Productions

bibtex {-> bibtex}
    = content*
    { -> New bibtex([content.content])};

content = {str} string_entry {-> New content.str(string_entry)}|
          {pre} preamble_entry {-> New content.pre(preamble_entry)}|
          {ent} entry {-> New content.ent(entry)};

preamble_entry {-> preamble_entry}
    = {prebrace} preamble l_brace val_or_sid concat* r_brace
    {-> New preamble_entry.prebrace(val_or_sid, [concat.concat])}
    | {preparen} preamble l_paren val_or_sid concat* r_paren
    {-> New preamble_entry.preparen(val_or_sid, [concat.concat])};

// d'oh...BibTeX grammar...we could cheat a bit here, but Sable does apparently not make it possible
// to map two different productions to the same AST node (which isn't needed in a WELL DESIGNED grammar
// anyway)...

string_entry {-> string_entry}
    = {strbrace} estring l_brace [ckey]:identifier equals [q1]:quotec? [value]:string_literal [q2]:quotec? r_brace
    {-> New string_entry.strbrace(ckey, value)}
    | {strparen} estring l_paren [ckey]:identifier equals [q1]:quotec? [value]:string_literal [q2]:quotec? r_paren
    {-> New string_entry.strparen(ckey, value)};

entry {-> entry } = {entrybrace} entry_def l_brace [ckey]:identifier keyval_decl+ comma? r_brace
    {-> New entry.entrybrace(entry_def.entry_def, ckey, [keyval_decl.keyval_decl])}
    | {entryparen} entry_def l_paren [ckey]:identifier keyval_decl+ comma? r_paren
    {-> New entry.entryparen(entry_def.entry_def, ckey, [keyval_decl.keyval_decl])};


// Enable if we want strict entry matches
/*
entry_def {-> entry_def} =
        {article} article {-> New entry_def.article()}
        | {book} book {-> New entry_def.book()}
        | {booklet} booklet {-> New entry_def.booklet()}
        | {conference} conference {-> New entry_def.conference()}
        | {inbook} inbook {-> New entry_def.inbook()}
        | {incollection} incollection {-> New entry_def.incollection()}
        | {inproceedings} inproceedings {-> New entry_def.inproceedings()}
        | {manual} manual {-> New entry_def.manual()}
        | {mastersthesis} mastersthesis {-> New entry_def.mastersthesis()}
        | {misc} misc {-> New entry_def.misc()}
        | {patent} patent {-> New entry_def.patent()}
        | {periodical} periodical {-> New entry_def.periodical()}
        | {phdthesis} phdthesis {-> New entry_def.phdthesis()}
        | {proceedings} proceedings {-> New entry_def.proceedings()}
        | {techreport} techreport {-> New entry_def.techreport()}
        | {unpublished} unpublished {-> New entry_def.unpublished()};
*/

entry_def {-> entry_def} = entry_name {-> New entry_def(entry_name)};

keyval_decl {-> keyval_decl } = comma [vkey]:identifier equals val_or_sid concat*
    {->New keyval_decl(vkey, val_or_sid, [concat.concat])};

// We won't match quotes, since it's not a big issue and should be visible by syntax
// highlight in TeXlipse
val_or_sid {-> val_or_sid} = {value} [q1]:quotec? string_literal [q2]:quotec? {-> New val_or_sid.value(string_literal)}
        | {num} number {-> New val_or_sid.num(number)}
        | {id} identifier {-> New val_or_sid.id(identifier)};

concat {-> concat} = sharp val_or_sid {->New concat(val_or_sid)};


// ----------------------------------------------------------------------------
Abstract Syntax Tree
bibtex = content*;

content = {str} string_entry |
          {pre} preamble_entry |
          {ent} entry;

string_entry = {strbrace} identifier string_literal | {strparen} identifier string_literal;

preamble_entry = {prebrace} val_or_sid concat* | {preparen} val_or_sid concat*;

entry = {entrybrace} entry_def identifier keyval_decl+ | {entryparen} entry_def identifier keyval_decl+;

/*
entry_def = {article}
        | {book}
        | {booklet}
        | {conference}
        | {inbook}
        | {incollection}
        | {inproceedings}
        | {manual}
        | {mastersthesis}
        | {misc}
        | {patent}
        | {periodical}
        | {phdthesis}
        | {proceedings}
        | {techreport}
        | {unpublished};
*/
entry_def = entry_name;

keyval_decl = identifier val_or_sid concat*;

concat = val_or_sid;

val_or_sid = {value} string_literal
        | {num} number
        | {id} identifier;

// ----------------------------------------------------------------------------
