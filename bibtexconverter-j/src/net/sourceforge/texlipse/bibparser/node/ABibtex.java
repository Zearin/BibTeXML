/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.bibparser.node;

import java.util.*;
import net.sourceforge.texlipse.bibparser.analysis.*;

@SuppressWarnings("nls")
public final class ABibtex extends PBibtex
{
    private final LinkedList<PStringEntry> _stringEntry_ = new LinkedList<PStringEntry>();
    private final LinkedList<PEntry> _entry_ = new LinkedList<PEntry>();

    public ABibtex()
    {
        // Constructor
    }

    public ABibtex(
        @SuppressWarnings("hiding") List<PStringEntry> _stringEntry_,
        @SuppressWarnings("hiding") List<PEntry> _entry_)
    {
        // Constructor
        setStringEntry(_stringEntry_);

        setEntry(_entry_);

    }

    @Override
    public Object clone()
    {
        return new ABibtex(
            cloneList(this._stringEntry_),
            cloneList(this._entry_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABibtex(this);
    }

    public LinkedList<PStringEntry> getStringEntry()
    {
        return this._stringEntry_;
    }

    public void setStringEntry(List<PStringEntry> list)
    {
        this._stringEntry_.clear();
        this._stringEntry_.addAll(list);
        for(PStringEntry e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PEntry> getEntry()
    {
        return this._entry_;
    }

    public void setEntry(List<PEntry> list)
    {
        this._entry_.clear();
        this._entry_.addAll(list);
        for(PEntry e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stringEntry_)
            + toString(this._entry_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stringEntry_.remove(child))
        {
            return;
        }

        if(this._entry_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PStringEntry> i = this._stringEntry_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStringEntry) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PEntry> i = this._entry_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEntry) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
