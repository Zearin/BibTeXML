/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.bibparser.parser;

import net.sourceforge.texlipse.bibparser.lexer.*;
import net.sourceforge.texlipse.bibparser.node.*;
import net.sourceforge.texlipse.bibparser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAbibtex1Bibtex */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAbibtex2Bibtex */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAbibtex3Bibtex */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAbibtex4Bibtex */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AAstrbracestringentry1StringEntry */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAstrbracestringentry2StringEntry */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AAstrbracestringentry3StringEntry */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce AAstrbracestringentry4StringEntry */
		    {
			ArrayList list = new7();
			push(goTo(1), list);
		    }
		    break;
                    case 8: /* reduce AAstrparenstringentry1StringEntry */
		    {
			ArrayList list = new8();
			push(goTo(1), list);
		    }
		    break;
                    case 9: /* reduce AAstrparenstringentry2StringEntry */
		    {
			ArrayList list = new9();
			push(goTo(1), list);
		    }
		    break;
                    case 10: /* reduce AAstrparenstringentry3StringEntry */
		    {
			ArrayList list = new10();
			push(goTo(1), list);
		    }
		    break;
                    case 11: /* reduce AAstrparenstringentry4StringEntry */
		    {
			ArrayList list = new11();
			push(goTo(1), list);
		    }
		    break;
                    case 12: /* reduce AAentrybraceentry1Entry */
		    {
			ArrayList list = new12();
			push(goTo(2), list);
		    }
		    break;
                    case 13: /* reduce AAentrybraceentry2Entry */
		    {
			ArrayList list = new13();
			push(goTo(2), list);
		    }
		    break;
                    case 14: /* reduce AAentryparenentry1Entry */
		    {
			ArrayList list = new14();
			push(goTo(2), list);
		    }
		    break;
                    case 15: /* reduce AAentryparenentry2Entry */
		    {
			ArrayList list = new15();
			push(goTo(2), list);
		    }
		    break;
                    case 16: /* reduce AEntryDef */
		    {
			ArrayList list = new16();
			push(goTo(3), list);
		    }
		    break;
                    case 17: /* reduce AAkeyvaldecl1KeyvalDecl */
		    {
			ArrayList list = new17();
			push(goTo(4), list);
		    }
		    break;
                    case 18: /* reduce AAkeyvaldecl2KeyvalDecl */
		    {
			ArrayList list = new18();
			push(goTo(4), list);
		    }
		    break;
                    case 19: /* reduce AAvaluevalorsid1ValOrSid */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce AAvaluevalorsid2ValOrSid */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce AAvaluevalorsid3ValOrSid */
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;
                    case 22: /* reduce AAvaluevalorsid4ValOrSid */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce ANumValOrSid */
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;
                    case 24: /* reduce AIdValOrSid */
		    {
			ArrayList list = new24();
			push(goTo(5), list);
		    }
		    break;
                    case 25: /* reduce AConcat */
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce ATerminal$StringEntry */
		    {
			ArrayList list = new26();
			push(goTo(7), list);
		    }
		    break;
                    case 27: /* reduce ANonTerminal$StringEntry */
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;
                    case 28: /* reduce ATerminal$Entry */
		    {
			ArrayList list = new28();
			push(goTo(8), list);
		    }
		    break;
                    case 29: /* reduce ANonTerminal$Entry */
		    {
			ArrayList list = new29();
			push(goTo(8), list);
		    }
		    break;
                    case 30: /* reduce ATerminal$KeyvalDecl */
		    {
			ArrayList list = new30();
			push(goTo(9), list);
		    }
		    break;
                    case 31: /* reduce ANonTerminal$KeyvalDecl */
		    {
			ArrayList list = new31();
			push(goTo(9), list);
		    }
		    break;
                    case 32: /* reduce ATerminal$Concat */
		    {
			ArrayList list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce ANonTerminal$Concat */
		    {
			ArrayList list = new33();
			push(goTo(10), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PBibtex node1 = (PBibtex) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAbibtex1Bibtex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PBibtex pbibtexNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        }

        pbibtexNode1 = new ABibtex(listNode2, listNode3);
        }
	nodeList.add(pbibtexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAbibtex2Bibtex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBibtex pbibtexNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pbibtexNode1 = new ABibtex(listNode3, listNode4);
        }
	nodeList.add(pbibtexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAbibtex3Bibtex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBibtex pbibtexNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbibtexNode1 = new ABibtex(listNode2, listNode4);
        }
	nodeList.add(pbibtexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAbibtex4Bibtex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBibtex pbibtexNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pbibtexNode1 = new ABibtex(listNode3, listNode5);
        }
	nodeList.add(pbibtexNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAstrbracestringentry1StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList5.get(0);

        pstringentryNode1 = new AStrbraceStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAstrbracestringentry2StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList6.get(0);

        pstringentryNode1 = new AStrbraceStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAstrbracestringentry3StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList5.get(0);

        pstringentryNode1 = new AStrbraceStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAstrbracestringentry4StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList6.get(0);

        pstringentryNode1 = new AStrbraceStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAstrparenstringentry1StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList5.get(0);

        pstringentryNode1 = new AStrparenStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAstrparenstringentry2StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList6.get(0);

        pstringentryNode1 = new AStrparenStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAstrparenstringentry3StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList5.get(0);

        pstringentryNode1 = new AStrparenStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAstrparenstringentry4StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringEntry pstringentryNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TStringLiteral tstringliteralNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tstringliteralNode3 = (TStringLiteral)nodeArrayList6.get(0);

        pstringentryNode1 = new AStrparenStringEntry(tidentifierNode2, tstringliteralNode3);
        }
	nodeList.add(pstringentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAentrybraceentry1Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEntry pentryNode1;
        {
            // Block
        PEntryDef pentrydefNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        pentrydefNode2 = (PEntryDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pentryNode1 = new AEntrybraceEntry(pentrydefNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAentrybraceentry2Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEntry pentryNode1;
        {
            // Block
        PEntryDef pentrydefNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        pentrydefNode2 = (PEntryDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pentryNode1 = new AEntrybraceEntry(pentrydefNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAentryparenentry1Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEntry pentryNode1;
        {
            // Block
        PEntryDef pentrydefNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        pentrydefNode2 = (PEntryDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pentryNode1 = new AEntryparenEntry(pentrydefNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAentryparenentry2Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEntry pentryNode1;
        {
            // Block
        PEntryDef pentrydefNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        pentrydefNode2 = (PEntryDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pentryNode1 = new AEntryparenEntry(pentrydefNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pentryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AEntryDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEntryDef pentrydefNode1;
        {
            // Block
        TEntryName tentrynameNode2;
        tentrynameNode2 = (TEntryName)nodeArrayList1.get(0);

        pentrydefNode1 = new AEntryDef(tentrynameNode2);
        }
	nodeList.add(pentrydefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAkeyvaldecl1KeyvalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeyvalDecl pkeyvaldeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PValOrSid pvalorsidNode3;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pvalorsidNode3 = (PValOrSid)nodeArrayList4.get(0);
        {
            // Block
        }

        pkeyvaldeclNode1 = new AKeyvalDecl(tidentifierNode2, pvalorsidNode3, listNode4);
        }
	nodeList.add(pkeyvaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAkeyvaldecl2KeyvalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeyvalDecl pkeyvaldeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PValOrSid pvalorsidNode3;
        LinkedList listNode5 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pvalorsidNode3 = (PValOrSid)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pkeyvaldeclNode1 = new AKeyvalDecl(tidentifierNode2, pvalorsidNode3, listNode5);
        }
	nodeList.add(pkeyvaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAvaluevalorsid1ValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalorsidNode1 = new AValueValOrSid(tstringliteralNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAvaluevalorsid2ValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList2.get(0);

        pvalorsidNode1 = new AValueValOrSid(tstringliteralNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAvaluevalorsid3ValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalorsidNode1 = new AValueValOrSid(tstringliteralNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAvaluevalorsid4ValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList2.get(0);

        pvalorsidNode1 = new AValueValOrSid(tstringliteralNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ANumValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalorsidNode1 = new ANumValOrSid(tnumberNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AIdValOrSid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValOrSid pvalorsidNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvalorsidNode1 = new AIdValOrSid(tidentifierNode2);
        }
	nodeList.add(pvalorsidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AConcat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConcat pconcatNode1;
        {
            // Block
        PValOrSid pvalorsidNode2;
        pvalorsidNode2 = (PValOrSid)nodeArrayList2.get(0);

        pconcatNode1 = new AConcat(pvalorsidNode2);
        }
	nodeList.add(pconcatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ATerminal$StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStringEntry pstringentryNode1;
        pstringentryNode1 = (PStringEntry)nodeArrayList1.get(0);
	if(pstringentryNode1 != null)
	{
	  listNode2.add(pstringentryNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ANonTerminal$StringEntry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStringEntry pstringentryNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstringentryNode2 = (PStringEntry)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstringentryNode2 != null)
	{
	  listNode3.add(pstringentryNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ATerminal$Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PEntry pentryNode1;
        pentryNode1 = (PEntry)nodeArrayList1.get(0);
	if(pentryNode1 != null)
	{
	  listNode2.add(pentryNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ANonTerminal$Entry */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PEntry pentryNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pentryNode2 = (PEntry)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pentryNode2 != null)
	{
	  listNode3.add(pentryNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ATerminal$KeyvalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PKeyvalDecl pkeyvaldeclNode1;
        pkeyvaldeclNode1 = (PKeyvalDecl)nodeArrayList1.get(0);
	if(pkeyvaldeclNode1 != null)
	{
	  listNode2.add(pkeyvaldeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANonTerminal$KeyvalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PKeyvalDecl pkeyvaldeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pkeyvaldeclNode2 = (PKeyvalDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pkeyvaldeclNode2 != null)
	{
	  listNode3.add(pkeyvaldeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATerminal$Concat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConcat pconcatNode1;
        pconcatNode1 = (PConcat)nodeArrayList1.get(0);
	if(pconcatNode1 != null)
	{
	  listNode2.add(pconcatNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANonTerminal$Concat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConcat pconcatNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconcatNode2 = (PConcat)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconcatNode2 != null)
	{
	  listNode3.add(pconcatNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, ERROR, 1}, {4, SHIFT, 9}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 3}, {16, ACCEPT, -1}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 6}, {4, SHIFT, 11}, {7, SHIFT, 12}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 2}, {3, SHIFT, 2}, },
			{{-1, ERROR, 9}, {13, SHIFT, 16}, },
			{{-1, ERROR, 10}, {13, SHIFT, 17}, },
			{{-1, ERROR, 11}, {13, SHIFT, 18}, },
			{{-1, ERROR, 12}, {13, SHIFT, 19}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 3}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 16}, {10, SHIFT, 20}, },
			{{-1, ERROR, 17}, {10, SHIFT, 21}, },
			{{-1, ERROR, 18}, {9, SHIFT, 22}, },
			{{-1, ERROR, 19}, {9, SHIFT, 22}, },
			{{-1, ERROR, 20}, {14, SHIFT, 26}, {15, SHIFT, 27}, },
			{{-1, ERROR, 21}, {14, SHIFT, 28}, {15, SHIFT, 29}, },
			{{-1, ERROR, 22}, {13, SHIFT, 30}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 24}, {5, SHIFT, 31}, {9, SHIFT, 32}, },
			{{-1, ERROR, 25}, {8, SHIFT, 34}, {9, SHIFT, 35}, },
			{{-1, ERROR, 26}, {15, SHIFT, 36}, },
			{{-1, ERROR, 27}, {5, SHIFT, 37}, {14, SHIFT, 38}, },
			{{-1, ERROR, 28}, {15, SHIFT, 39}, },
			{{-1, ERROR, 29}, {8, SHIFT, 40}, {14, SHIFT, 41}, },
			{{-1, ERROR, 30}, {10, SHIFT, 42}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 32}, {5, SHIFT, 43}, {13, SHIFT, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 35}, {8, SHIFT, 44}, {13, SHIFT, 30}, },
			{{-1, ERROR, 36}, {5, SHIFT, 45}, {14, SHIFT, 46}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 38}, {5, SHIFT, 47}, },
			{{-1, ERROR, 39}, {8, SHIFT, 48}, {14, SHIFT, 49}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 41}, {8, SHIFT, 50}, },
			{{-1, ERROR, 42}, {12, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {15, SHIFT, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 46}, {5, SHIFT, 56}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 49}, {8, SHIFT, 57}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 53}, {15, SHIFT, 58}, },
			{{-1, REDUCE, 19}, {14, SHIFT, 59}, },
			{{-1, REDUCE, 17}, {11, SHIFT, 60}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 20}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 60}, {12, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {15, SHIFT, 54}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 18}, {11, SHIFT, 60}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 33}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {7, 13}, },
			{{-1, 5}, {8, 15}, {14, 15}, },
			{{-1, 6}, },
			{{-1, 23}, {24, 33}, {25, 33}, },
			{{-1, 55}, {60, 64}, },
			{{-1, 61}, {62, 65}, },
			{{-1, 7}, },
			{{-1, 8}, {7, 14}, },
			{{-1, 24}, {19, 25}, },
			{{-1, 62}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: estring, entry name, EOF",
			"expecting: '{', '('",
			"expecting: EOF",
			"expecting: entry name, EOF",
			"expecting: identifier",
			"expecting: '='",
			"expecting: ','",
			"expecting: '"', string literal",
			"expecting: '}', ')', ','",
			"expecting: '}', ','",
			"expecting: ')', ','",
			"expecting: string literal",
			"expecting: '}', '"'",
			"expecting: ')', '"'",
			"expecting: '}', identifier",
			"expecting: ')', identifier",
			"expecting: '}'",
			"expecting: ')'",
			"expecting: number, identifier, '"', string literal",
			"expecting: '}', ')', ',', '#'",
			"expecting: '}', ')', ',', '#', '"'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 0, 3, 1, 0, 3, 4, 4, 4, 4, 0, 3, 3, 5, 5, 6, 6, 7, 7, 4, 8, 9, 10, 11, 12, 11, 13, 5, 3, 14, 8, 3, 15, 12, 0, 16, 13, 0, 17, 18, 3, 3, 0, 16, 0, 0, 17, 0, 19, 19, 11, 20, 19, 0, 0, 20, 19, 18, 19, 19, 19, 19, 19, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
